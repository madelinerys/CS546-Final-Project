<h1>Admin</h1>

<article>
<h2>Set SimDate</h2>
<h3>Set the system date to sometime in the past, which will allow you to bet on games that have already occurred,
which in turn is needed for debugging and testing, along with conducting demos of the system</h3>

<form id="setSimDate" name="setSimDate" action="/admin/simdate">
<label for="simdate">SimDate</label>
<input name="simdate" id="simdate" type="date" value="{{simdate}}"/>
<button id="btnClearSimDate" name="btnClearSimDate">Clear SimDate</button>
</form>
</article>

<div class="vspacer"></div>

<article>
<h2>Delete all bets</h2>
<h3>Deletes all bets from bets collection, leaving it empty</h3>

<form id="deleteAllBets" name="deleteAllBets">
<label for="idDeleteBets">Delete All Bets</label>
<button id="idDeleteBets" name="btnDeleteBets">Delete All Bets</button>
</form>
</article>

<div class="vspacer"></div>

<article>
<h2>Resolve bets</h2>
<h3>Decides any bets (win/lose/push) based on either current date (today), or SimDate if it's non-null</h3>

<form id="resolveBets">
<label for="idResolveBets">Resolve Bets</label>
<button id="idResolveBets" name="btnResolveBets">Resolve Bets</button>
</form>
</article>

<div class="vspacer"></div>

<article>
<h2>Generate random bets</h2>
<h3>Generates a few random bets, which comes in handy for testing and running demos</h3>

<form id="frmGenerateBets">
<label for="btnGenerateBets">Generate Random Bets</label>
<button id="btnGenerateBets" name="btnGenerateBets">Generate Random Bets</button>
</form>
</article>

<div class="vspacer"></div>

<article class="time-out-user">
<h2>Time out user</h2>
<h3>Invalidates AuthCookie, so next time the user tries to do something, they should kick out</h3>

<form name="timeOutUser" action="/admin/timeOutUser">
<label for="idTimeOut">Username</label>
<input name="timeOut" id="idTimeOut" type="text"/>
<button name="btnTimeOut">Time Out User</button>
</form>
</article>

<div class="vspacer"></div>
<article>
<h2>See the house's take</h2>
<h3><a class="houselink" href="/admin/housetake">Summary of how the house is doing on betting payout</a></h3>
</article>


<script>
let orgSimdate = "{{simdate}}";

$('#deleteAllBets').submit(deleteAllBets);
$('#simdate').change(simDateChanged);
$('#simdate').focus(simDateFocused);
$('#simdate').focus(simDateFocused);
$('#btnClearSimDate').click(clearSimDate);
$('#resolveBets').submit(resolveBets);
$('#frmGenerateBets').submit(generateBets);

function generateBets(ev) {
  ev.preventDefault();
  var requestConfig = {
    method: 'POST',
    url: '/admin/generateBets',
  };
  $.ajax(requestConfig)
    .then(x => alert("A random number of bets have been generated on behalf of the current user.\n\n" +
                     "Date of bets: " + $('#simdate').val()))
    .catch(e => alert(JSON.stringify(e.responseJSON)));
}

function clearSimDate(ev) {
  ev.preventDefault();
  $("#simdate").val(null);
  simDateChanged(ev);
}

function simDateChanged(ev) {
  ev.preventDefault();
  const simdateControl = $("#simdate");
  const todayDate = new Date().toISOString().split("T")[0];
  const todayDateJulian = new Date(todayDate).valueOf();
 
  const simdate = simdateControl.val();
  const simDateJulian = new Date(simdate).valueOf();

  if (simDateJulian >= todayDateJulian) {
    alert("SimDate must be set to either a date in the past, or empty to disable.")
    simdateControl.val(orgSimdate);
    return;
  }
  var requestConfig = {
    method: 'PUT',
    data: {simdate: simdateControl.val()},
    url: '/admin/simdate',
  };
  $.ajax(requestConfig).then(function (responseMessage) {
    orgSimdate = simdateControl.val();
    console.log("orgSimdate is now " + orgSimdate);
    console.log(responseMessage);
  }).catch(console.log);
  console.log("org sim date is " + orgSimdate);
}

function resolveBets(ev) {
  ev.preventDefault();
  var requestConfig = {
    method: 'PUT',
    url: '/admin/resolveBets',
  };
  $('body').css("cursor", "progress");
  $.ajax(requestConfig).then((msg) => {
    $('body').css("cursor", "default");
    alert('All bets that could be resolved have now been resolved.');
  }).catch((msg) => {
    $('body').css("cursor", "default");
    alert(msg);
  });
}

function simDateFocused(ev) {
  orgSimdate = $("#simdate").val();
}

function simDateReset(ev) {
  alert("simDateReset");
}

function deleteAllBets(ev) {
  ev.preventDefault();
  const b = confirm("Are you sure you want to delete all bets from the bets collection?");
  if (!b)
    return;
  var requestConfig = {
    method: 'DELETE',
    url: '/admin/bets',
  };
  $.ajax(requestConfig).then(function (responseMessage) {
    alert("All bets have been deleted!\n\nYou're the boss.");
  }).catch(e => alert("there was an error " + JSON.stringify(e) + "deleting all bets."));
}

</script>

